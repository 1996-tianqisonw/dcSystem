<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hx.mapper.RoleMapper">
  <resultMap id="BaseResultMap" type="com.hx.entity.Role">
    <id column="role_id" jdbcType="INTEGER" property="roleId" />
    <result column="role_name" jdbcType="VARCHAR" property="roleName" />
    <result column="state" jdbcType="CHAR" property="state" />
    <result column="time" jdbcType="TIMESTAMP" property="time" />
  </resultMap>
  <resultMap id="rolemenutResultMap" type="com.hx.entity.Role" extends="BaseResultMap">
    <!-- collection中resultMap引用的是其它文件的map 需要命名空间+id,例如：com.hx.entity.EmpMapper.empResultMap -->
    <collection property="menus" ofType="com.hx.entity.Menu"
                resultMap="com.hx.mapper.MenuMapper.BaseResultMap" />
  </resultMap>

  <resultMap id="usersroleResultMap" type="com.hx.entity.Role" extends="BaseResultMap">
    <!-- collection中resultMap引用的是其它文件的map 需要命名空间+id,例如：com.hx.entity.EmpMapper.empResultMap -->
    <collection property="users" ofType="com.hx.entity.Users"
                resultMap="com.hx.mapper.UsersMapper.BaseResultMap" />
  </resultMap>

  <select id="selectrolemenu" parameterType="com.hx.entity.Role" resultMap="rolemenutResultMap">
		select a.*, b.*,d.* from role a left Join role_menu b on a.role_id=b.role_id left Join menu d on b.menu_id=d.menu_id
		where a.role_id = #{roleId}
	</select>

  <select id="selectroleuser" parameterType="String" resultMap="usersroleResultMap">
		select a.*, b.*,d.* from role a left Join users_role b on a.role_id=b.role_id left Join users d on b.user_id=d.user_id
		where a.role_id = #{roleId}
	</select>

  <select id="rolename" parameterType="com.hx.entity.Role" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from role where role_name=#{roleName}
  </select>

  <delete id="deleteRole" >
    delete from role where role_id in
    <foreach collection="array" open="(" separator="," close=")" item="pk">
      #{pk}
    </foreach>
  </delete>

  <delete id="deleteusersrole">
    delete from users_role where user_id in
    <foreach collection="array" open="(" separator="," close=")" item="pk">
      #{pk}
    </foreach>
  </delete>

  <delete id="deleteusersro">
    delete from users_role where user_id=#{userId} and role_id=#{roleId}
  </delete>

  <insert id="insertusersro">
    insert into users_role (user_id,role_id) value (#{userId},#{roleId})
  </insert>

  <delete id="deleteroleme" parameterType="String">
    delete from role_menu where role_id=#{rid}
  </delete>

  <insert id="insertroleme">
    insert into role_menu (role_id,menu_id) value (#{roleId},#{menuId})
  </insert>

  <select id="rolelist" parameterType="com.hx.entity.Role" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from role
  </select>




  <sql id="Base_Column_List">
    role_id, role_name, state, time
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from role
    where role_id = #{roleId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from role
    where role_id = #{roleId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.hx.entity.Role">
    insert into role (role_id, role_name, state, 
      time)
    values (#{roleId,jdbcType=INTEGER}, #{roleName,jdbcType=VARCHAR}, #{state,jdbcType=CHAR}, 
      #{time,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.hx.entity.Role">
    insert into role
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="roleId != null">
        role_id,
      </if>
      <if test="roleName != null">
        role_name,
      </if>
      <if test="state != null">
        state,
      </if>
      <if test="time != null">
        time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="roleId != null">
        #{roleId,jdbcType=INTEGER},
      </if>
      <if test="roleName != null">
        #{roleName,jdbcType=VARCHAR},
      </if>
      <if test="state != null">
        #{state,jdbcType=CHAR},
      </if>
      <if test="time != null">
        #{time,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.hx.entity.Role">
    update role
    <set>
      <if test="roleName != null">
        role_name = #{roleName,jdbcType=VARCHAR},
      </if>
      <if test="state != null">
        state = #{state,jdbcType=CHAR},
      </if>
      <if test="time != null">
        time = #{time,jdbcType=TIMESTAMP},
      </if>
    </set>
    where role_id = #{roleId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.hx.entity.Role">
    update role
    set role_name = #{roleName,jdbcType=VARCHAR},
      state = #{state,jdbcType=CHAR},
      time = #{time,jdbcType=TIMESTAMP}
    where role_id = #{roleId,jdbcType=INTEGER}
  </update>
</mapper>